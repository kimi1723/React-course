{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hubi\\\\Documents\\\\GitHub\\\\React-course\\\\Exercises\\\\01-starting-project\\\\src\\\\App.js\";\nimport Header from './components/UI/Header';\nimport InvestmentForm from './components/InvestmentForm';\nimport InvestmentResultTable from './components/InvestmentResultTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const calculateHandler = investmentData => {};\n  const calculateInvestmentHandler = investmentData => {\n    console.log(investmentData);\n    const {\n      currentSavings,\n      yearlyContribution,\n      expectedReturn,\n      duration\n    } = investmentData;\n    const yearlyData = [];\n    const yearlyInterest = currentSavings * expectedReturn;\n    // const yearlyContribution = +investmentData['yearly-contribution']; \n    // const expectedReturn = +investmentData['expected-return'] / 100;\n    // const duration = +investmentData['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(InvestmentForm, {\n      calculateInvestment: calculateInvestmentHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InvestmentResultTable, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","InvestmentForm","InvestmentResultTable","jsxDEV","_jsxDEV","App","calculateHandler","investmentData","calculateInvestmentHandler","console","log","currentSavings","yearlyContribution","expectedReturn","duration","yearlyData","yearlyInterest","i","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","calculateInvestment","_c","$RefreshReg$"],"sources":["C:/Users/Hubi/Documents/GitHub/React-course/Exercises/01-starting-project/src/App.js"],"sourcesContent":["import Header from './components/UI/Header';\nimport InvestmentForm from './components/InvestmentForm';\nimport InvestmentResultTable from './components/InvestmentResultTable';\n\nfunction App() {\n  const calculateHandler = (investmentData) => {\n   \n  };\n\n  const calculateInvestmentHandler = (investmentData) => {\n    console.log(investmentData)\n\n    const {currentSavings, yearlyContribution, expectedReturn, duration} = investmentData;\n\n      const yearlyData = []; \n      const yearlyInterest = currentSavings * expectedReturn;\n      // const yearlyContribution = +investmentData['yearly-contribution']; \n      // const expectedReturn = +investmentData['expected-return'] / 100;\n      // const duration = +investmentData['duration'];\n\n      // The below code calculates yearly results (total savings, interest etc)\n      for (let i = 0; i < duration; i++) {\n        const yearlyInterest = currentSavings * expectedReturn;\n        currentSavings += yearlyInterest + yearlyContribution;\n        yearlyData.push({\n            // feel free to change the shape of the data pushed to the array!\n            year: i + 1,\n            yearlyInterest: yearlyInterest,\n            savingsEndOfYear: currentSavings,\n            yearlyContribution: yearlyContribution,\n      });\n    }\n  }\n\n  return (\n    <div>\n     <Header />\n\n      <InvestmentForm calculateInvestment={calculateInvestmentHandler}/>\n\n      <InvestmentResultTable />\n\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n\n    \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,MAAM,MAAM,wBAAwB;AAC3C,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,qBAAqB,MAAM,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvE,SAASC,GAAGA,CAAA,EAAG;EACb,MAAMC,gBAAgB,GAAIC,cAAc,IAAK,CAE7C,CAAC;EAED,MAAMC,0BAA0B,GAAID,cAAc,IAAK;IACrDE,OAAO,CAACC,GAAG,CAACH,cAAc,CAAC;IAE3B,MAAM;MAACI,cAAc;MAAEC,kBAAkB;MAAEC,cAAc;MAAEC;IAAQ,CAAC,GAAGP,cAAc;IAEnF,MAAMQ,UAAU,GAAG,EAAE;IACrB,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;IACtD;IACA;IACA;;IAEA;IACA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,EAAEG,CAAC,EAAE,EAAE;MACjC,MAAMD,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDG,UAAU,CAACG,IAAI,CAAC;QACZ;QACAC,IAAI,EAAEF,CAAC,GAAG,CAAC;QACXD,cAAc,EAAEA,cAAc;QAC9BI,gBAAgB,EAAET,cAAc;QAChCC,kBAAkB,EAAEA;MAC1B,CAAC,CAAC;IACJ;EACF,CAAC;EAED,oBACER,OAAA;IAAAiB,QAAA,gBACCjB,OAAA,CAACJ,MAAM;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAETrB,OAAA,CAACH,cAAc;MAACyB,mBAAmB,EAAElB;IAA2B;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAElErB,OAAA,CAACF,qBAAqB;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAMtB,CAAC;AAEV;AAACE,EAAA,GA5CQtB,GAAG;AA8CZ,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}